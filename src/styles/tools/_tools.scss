/*REM*/

// ----
// rem mixins
// ----
$rem-base: 16px !default;

// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function rem-separator($list) {
  @if function-exists("list-separator")==true {
    @return list-separator($list);
  }

  $test-list: ();

  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list==$list, space, comma);
}

@mixin rem-base($zoom: 100%) {
  // font-size: $zoom / 16px * $rem-base;
  font-size: calc($zoom / 16px * $rem-base);
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value)=="number"and unit($value)=="rem"and $to=="px" {
      $result: append($result, $value / 1rem * $rem-base, $separator);
    }

    @else if type-of($value)=="number"and unit($value)=="px"and $to=="rem" {
      $result: append($result, $value / ($rem-base / 1rem), $separator);
    }

    @else if type-of($value)=="list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    }

    @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result)==1, nth($result, 1), $result);
}

@function rem($values...) {
  @return rem-convert(rem, $values...);
}

@mixin rem($properties, $values...) {
  @if type-of($properties)=="map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  }

  @else {
    @each $property in $properties {
      #{$property}: rem-convert(rem, $values...);
    }
  }
}

// $base-font-size: 100% !default;
// //$base-line-height is 24px while $base-font-size is 16px
// $base-line-height: 150%;
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return (my-div($num, $num * 0 + 1));
}

@function my-div($a, $b) {
  @return calc($a / $b);
}

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of em\'s.
// Call with 1, 2, 3 or 4 parameters, \'px\' is not required but supported
// rem-calc(10 20 30px 40);
// Space delimited, if you want to delimit using comma\'s, wrap it in another pair of brackets
// rem-calc((10, 20, 30, 40px));
// Optionally call with a different base (eg: 8px) to calculate em.
// rem-calc(16px 32px 48px, 8px);
// If you require to comma separate your list
// rem-calc((16px, 32px, 48), 8px);
@function convert-to-rem($value, $base-value: $rem-base) {
  $value: my-div(strip-unit($value), strip-unit($base-value)) * 1rem;

  @if ($value==0rem) {
    $value: 0;
  }

  // Turn 0em into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max==1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }

  $remValues: ();

  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }

  @return $remValues;
}

html {
  @include rem-base;
}


///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (zx: 376px,
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px);


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  }

  @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//USE
// @include respond-above(sm) {
//     .element {
//       font-weight: bold;
//     }
//   }

//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  }

  @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//USE
// @include respond-below(sm) {
//     .element {
//       font-weight: bold;
//     }
//   }


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

    // If one or both of the breakpoints don't exist.
  }

  @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower)==false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper)==false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

//USE
// @include respond-between(sm, md) {
//     .element {
//       font-weight: bold;
//     }
//   }

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
////////////////////////// ANIMATIONS MIXIN //////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
